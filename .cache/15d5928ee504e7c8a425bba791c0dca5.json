{"dependencies":[{"name":"tslib","loc":{"line":1,"column":39}},{"name":"@tensorflow/tfjs-core","loc":{"line":2,"column":20}},{"name":"../classes/FaceDetection","loc":{"line":3,"column":30}},{"name":"../utils","loc":{"line":4,"column":39}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractFaceTensors = extractFaceTensors;\n\nvar _tslib = require(\"tslib\");\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _FaceDetection = require(\"../classes/FaceDetection\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\r\n * Extracts the tensors of the image regions containing the detected faces.\r\n * Useful if you want to compute the face descriptors for the face images.\r\n * Using this method is faster then extracting a canvas for each face and\r\n * converting them to tensors individually.\r\n *\r\n * @param imageTensor The image tensor that face detection has been performed on.\r\n * @param detections The face detection results or face bounding boxes for that image.\r\n * @returns Tensors of the corresponding image region for each detected face.\r\n */\nfunction extractFaceTensors(imageTensor, detections) {\n  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n    return (0, _tslib.__generator)(this, function (_a) {\n      if (!(0, _utils.isTensor3D)(imageTensor) && !(0, _utils.isTensor4D)(imageTensor)) {\n        throw new Error('extractFaceTensors - expected image tensor to be 3D or 4D');\n      }\n      if ((0, _utils.isTensor4D)(imageTensor) && imageTensor.shape[0] > 1) {\n        throw new Error('extractFaceTensors - batchSize > 1 not supported');\n      }\n      return [2 /*return*/, tf.tidy(function () {\n        var _a = imageTensor.shape.slice((0, _utils.isTensor4D)(imageTensor) ? 1 : 0),\n            imgHeight = _a[0],\n            imgWidth = _a[1],\n            numChannels = _a[2];\n        var boxes = detections.map(function (det) {\n          return det instanceof _FaceDetection.FaceDetection ? det.forSize(imgWidth, imgHeight).box : det;\n        }).map(function (box) {\n          return box.clipAtImageBorders(imgWidth, imgHeight);\n        });\n        var faceTensors = boxes.map(function (_a) {\n          var x = _a.x,\n              y = _a.y,\n              width = _a.width,\n              height = _a.height;\n          return tf.slice3d(imageTensor.as3D(imgHeight, imgWidth, numChannels), [y, x, 0], [height, width, numChannels]);\n        });\n        return faceTensors;\n      })];\n    });\n  });\n}\n//# sourceMappingURL=extractFaceTensors.js.map"},"hash":"acdc74b5d96cdc92b2c1505ca99391ee"}