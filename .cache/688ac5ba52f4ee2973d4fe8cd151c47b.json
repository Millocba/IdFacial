{"dependencies":[{"name":"../utils","loc":{"line":1,"column":44}},{"name":"./Point","loc":{"line":2,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Box = undefined;\n\nvar _utils = require(\"../utils\");\n\nvar _Point = require(\"./Point\");\n\nvar Box = /** @class */function () {\n  function Box(_box, allowNegativeDimensions) {\n    if (allowNegativeDimensions === void 0) {\n      allowNegativeDimensions = true;\n    }\n    var box = _box || {};\n    var isBbox = [box.left, box.top, box.right, box.bottom].every(_utils.isValidNumber);\n    var isRect = [box.x, box.y, box.width, box.height].every(_utils.isValidNumber);\n    if (!isRect && !isBbox) {\n      throw new Error(\"Box.constructor - expected box to be IBoundingBox | IRect, instead have \" + JSON.stringify(box));\n    }\n    var _a = isRect ? [box.x, box.y, box.width, box.height] : [box.left, box.top, box.right - box.left, box.bottom - box.top],\n        x = _a[0],\n        y = _a[1],\n        width = _a[2],\n        height = _a[3];\n    Box.assertIsValidBox({ x: x, y: y, width: width, height: height }, 'Box.constructor', allowNegativeDimensions);\n    this._x = x;\n    this._y = y;\n    this._width = width;\n    this._height = height;\n  }\n  Box.isRect = function (rect) {\n    return !!rect && [rect.x, rect.y, rect.width, rect.height].every(_utils.isValidNumber);\n  };\n  Box.assertIsValidBox = function (box, callee, allowNegativeDimensions) {\n    if (allowNegativeDimensions === void 0) {\n      allowNegativeDimensions = false;\n    }\n    if (!Box.isRect(box)) {\n      throw new Error(callee + \" - invalid box: \" + JSON.stringify(box) + \", expected object with properties x, y, width, height\");\n    }\n    if (!allowNegativeDimensions && (box.width < 0 || box.height < 0)) {\n      throw new Error(callee + \" - width (\" + box.width + \") and height (\" + box.height + \") must be positive numbers\");\n    }\n  };\n  Object.defineProperty(Box.prototype, \"x\", {\n    get: function () {\n      return this._x;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"y\", {\n    get: function () {\n      return this._y;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"left\", {\n    get: function () {\n      return this.x;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"top\", {\n    get: function () {\n      return this.y;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"right\", {\n    get: function () {\n      return this.x + this.width;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"bottom\", {\n    get: function () {\n      return this.y + this.height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"area\", {\n    get: function () {\n      return this.width * this.height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"topLeft\", {\n    get: function () {\n      return new _Point.Point(this.left, this.top);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"topRight\", {\n    get: function () {\n      return new _Point.Point(this.right, this.top);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"bottomLeft\", {\n    get: function () {\n      return new _Point.Point(this.left, this.bottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Box.prototype, \"bottomRight\", {\n    get: function () {\n      return new _Point.Point(this.right, this.bottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Box.prototype.round = function () {\n    var _a = [this.x, this.y, this.width, this.height].map(function (val) {\n      return Math.round(val);\n    }),\n        x = _a[0],\n        y = _a[1],\n        width = _a[2],\n        height = _a[3];\n    return new Box({ x: x, y: y, width: width, height: height });\n  };\n  Box.prototype.floor = function () {\n    var _a = [this.x, this.y, this.width, this.height].map(function (val) {\n      return Math.floor(val);\n    }),\n        x = _a[0],\n        y = _a[1],\n        width = _a[2],\n        height = _a[3];\n    return new Box({ x: x, y: y, width: width, height: height });\n  };\n  Box.prototype.toSquare = function () {\n    var _a = this,\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height;\n    var diff = Math.abs(width - height);\n    if (width < height) {\n      x -= diff / 2;\n      width += diff;\n    }\n    if (height < width) {\n      y -= diff / 2;\n      height += diff;\n    }\n    return new Box({ x: x, y: y, width: width, height: height });\n  };\n  Box.prototype.rescale = function (s) {\n    var scaleX = (0, _utils.isDimensions)(s) ? s.width : s;\n    var scaleY = (0, _utils.isDimensions)(s) ? s.height : s;\n    return new Box({\n      x: this.x * scaleX,\n      y: this.y * scaleY,\n      width: this.width * scaleX,\n      height: this.height * scaleY\n    });\n  };\n  Box.prototype.pad = function (padX, padY) {\n    var _a = [this.x - padX / 2, this.y - padY / 2, this.width + padX, this.height + padY],\n        x = _a[0],\n        y = _a[1],\n        width = _a[2],\n        height = _a[3];\n    return new Box({ x: x, y: y, width: width, height: height });\n  };\n  Box.prototype.clipAtImageBorders = function (imgWidth, imgHeight) {\n    var _a = this,\n        x = _a.x,\n        y = _a.y,\n        right = _a.right,\n        bottom = _a.bottom;\n    var clippedX = Math.max(x, 0);\n    var clippedY = Math.max(y, 0);\n    var newWidth = right - clippedX;\n    var newHeight = bottom - clippedY;\n    var clippedWidth = Math.min(newWidth, imgWidth - clippedX);\n    var clippedHeight = Math.min(newHeight, imgHeight - clippedY);\n    return new Box({ x: clippedX, y: clippedY, width: clippedWidth, height: clippedHeight }).floor();\n  };\n  Box.prototype.shift = function (sx, sy) {\n    var _a = this,\n        width = _a.width,\n        height = _a.height;\n    var x = this.x + sx;\n    var y = this.y + sy;\n    return new Box({ x: x, y: y, width: width, height: height });\n  };\n  Box.prototype.padAtBorders = function (imageHeight, imageWidth) {\n    var w = this.width + 1;\n    var h = this.height + 1;\n    var dx = 1;\n    var dy = 1;\n    var edx = w;\n    var edy = h;\n    var x = this.left;\n    var y = this.top;\n    var ex = this.right;\n    var ey = this.bottom;\n    if (ex > imageWidth) {\n      edx = -ex + imageWidth + w;\n      ex = imageWidth;\n    }\n    if (ey > imageHeight) {\n      edy = -ey + imageHeight + h;\n      ey = imageHeight;\n    }\n    if (x < 1) {\n      edy = 2 - x;\n      x = 1;\n    }\n    if (y < 1) {\n      edy = 2 - y;\n      y = 1;\n    }\n    return { dy: dy, edy: edy, dx: dx, edx: edx, y: y, ey: ey, x: x, ex: ex, w: w, h: h };\n  };\n  Box.prototype.calibrate = function (region) {\n    return new Box({\n      left: this.left + region.left * this.width,\n      top: this.top + region.top * this.height,\n      right: this.right + region.right * this.width,\n      bottom: this.bottom + region.bottom * this.height\n    }).toSquare().round();\n  };\n  return Box;\n}();\nexports.Box = Box;\n//# sourceMappingURL=Box.js.map"},"hash":"a5a8a23582de46538ce27e102bc58d86"}