{"dependencies":[{"name":"tslib","loc":{"line":1,"column":31}},{"name":"@tensorflow/tfjs-core","loc":{"line":2,"column":20}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalize = normalize;\n\nvar _tslib = require(\"tslib\");\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction normalize(x, meanRgb) {\n  return tf.tidy(function () {\n    var r = meanRgb[0],\n        g = meanRgb[1],\n        b = meanRgb[2];\n    var avg_r = tf.fill((0, _tslib.__spreadArrays)(x.shape.slice(0, 3), [1]), r);\n    var avg_g = tf.fill((0, _tslib.__spreadArrays)(x.shape.slice(0, 3), [1]), g);\n    var avg_b = tf.fill((0, _tslib.__spreadArrays)(x.shape.slice(0, 3), [1]), b);\n    var avg_rgb = tf.concat([avg_r, avg_g, avg_b], 3);\n    return tf.sub(x, avg_rgb);\n  });\n}\n//# sourceMappingURL=normalize.js.map"},"hash":"e64cadb1366f6f50bbb70807b78cf23f"}