{"dependencies":[{"name":"tslib","loc":{"line":1,"column":50}},{"name":"@tensorflow/tfjs-core","loc":{"line":2,"column":20}},{"name":"../common/fullyConnectedLayer","loc":{"line":3,"column":36}},{"name":"../faceProcessor/util","loc":{"line":4,"column":35}},{"name":"../xception/TinyXception","loc":{"line":5,"column":29}},{"name":"./extractParams","loc":{"line":6,"column":30}},{"name":"./extractParamsFromWeigthMap","loc":{"line":7,"column":43}},{"name":"./types","loc":{"line":8,"column":23}},{"name":"../NeuralNetwork","loc":{"line":9,"column":30}},{"name":"../dom","loc":{"line":10,"column":37}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AgeGenderNet = undefined;\n\nvar _tslib = require(\"tslib\");\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _fullyConnectedLayer = require(\"../common/fullyConnectedLayer\");\n\nvar _util = require(\"../faceProcessor/util\");\n\nvar _TinyXception = require(\"../xception/TinyXception\");\n\nvar _extractParams = require(\"./extractParams\");\n\nvar _extractParamsFromWeigthMap = require(\"./extractParamsFromWeigthMap\");\n\nvar _types = require(\"./types\");\n\nvar _NeuralNetwork = require(\"../NeuralNetwork\");\n\nvar _dom = require(\"../dom\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar AgeGenderNet = /** @class */function (_super) {\n  (0, _tslib.__extends)(AgeGenderNet, _super);\n  function AgeGenderNet(faceFeatureExtractor) {\n    if (faceFeatureExtractor === void 0) {\n      faceFeatureExtractor = new _TinyXception.TinyXception(2);\n    }\n    var _this = _super.call(this, 'AgeGenderNet') || this;\n    _this._faceFeatureExtractor = faceFeatureExtractor;\n    return _this;\n  }\n  Object.defineProperty(AgeGenderNet.prototype, \"faceFeatureExtractor\", {\n    get: function () {\n      return this._faceFeatureExtractor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AgeGenderNet.prototype.runNet = function (input) {\n    var _this = this;\n    var params = this.params;\n    if (!params) {\n      throw new Error(this._name + \" - load model before inference\");\n    }\n    return tf.tidy(function () {\n      var bottleneckFeatures = input instanceof _dom.NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;\n      var pooled = tf.avgPool(bottleneckFeatures, [7, 7], [2, 2], 'valid').as2D(bottleneckFeatures.shape[0], -1);\n      var age = (0, _fullyConnectedLayer.fullyConnectedLayer)(pooled, params.fc.age).as1D();\n      var gender = (0, _fullyConnectedLayer.fullyConnectedLayer)(pooled, params.fc.gender);\n      return { age: age, gender: gender };\n    });\n  };\n  AgeGenderNet.prototype.forwardInput = function (input) {\n    var _this = this;\n    return tf.tidy(function () {\n      var _a = _this.runNet(input),\n          age = _a.age,\n          gender = _a.gender;\n      return { age: age, gender: tf.softmax(gender) };\n    });\n  };\n  AgeGenderNet.prototype.forward = function (input) {\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n      var _a;\n      return (0, _tslib.__generator)(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, (0, _dom.toNetInput)(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  AgeGenderNet.prototype.predictAgeAndGender = function (input) {\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n      var netInput, out, ages, genders, ageAndGenderTensors, predictionsByBatch;\n      var _this = this;\n      return (0, _tslib.__generator)(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, (0, _dom.toNetInput)(input)];\n          case 1:\n            netInput = _a.sent();\n            return [4 /*yield*/, this.forwardInput(netInput)];\n          case 2:\n            out = _a.sent();\n            ages = tf.unstack(out.age);\n            genders = tf.unstack(out.gender);\n            ageAndGenderTensors = ages.map(function (ageTensor, i) {\n              return {\n                ageTensor: ageTensor,\n                genderTensor: genders[i]\n              };\n            });\n            return [4 /*yield*/, Promise.all(ageAndGenderTensors.map(function (_a) {\n              var ageTensor = _a.ageTensor,\n                  genderTensor = _a.genderTensor;\n              return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {\n                var age, probMale, isMale, gender, genderProbability;\n                return (0, _tslib.__generator)(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4 /*yield*/, ageTensor.data()];\n                    case 1:\n                      age = _b.sent()[0];\n                      return [4 /*yield*/, genderTensor.data()];\n                    case 2:\n                      probMale = _b.sent()[0];\n                      isMale = probMale > 0.5;\n                      gender = isMale ? _types.Gender.MALE : _types.Gender.FEMALE;\n                      genderProbability = isMale ? probMale : 1 - probMale;\n                      ageTensor.dispose();\n                      genderTensor.dispose();\n                      return [2 /*return*/, { age: age, gender: gender, genderProbability: genderProbability }];\n                  }\n                });\n              });\n            }))];\n          case 3:\n            predictionsByBatch = _a.sent();\n            out.age.dispose();\n            out.gender.dispose();\n            return [2 /*return*/, netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]];\n        }\n      });\n    });\n  };\n  AgeGenderNet.prototype.getDefaultModelName = function () {\n    return 'age_gender_model';\n  };\n  AgeGenderNet.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n    _super.prototype.dispose.call(this, throwOnRedispose);\n  };\n  AgeGenderNet.prototype.loadClassifierParams = function (weights) {\n    var _a = this.extractClassifierParams(weights),\n        params = _a.params,\n        paramMappings = _a.paramMappings;\n    this._params = params;\n    this._paramMappings = paramMappings;\n  };\n  AgeGenderNet.prototype.extractClassifierParams = function (weights) {\n    return (0, _extractParams.extractParams)(weights);\n  };\n  AgeGenderNet.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    var _a = (0, _util.seperateWeightMaps)(weightMap),\n        featureExtractorMap = _a.featureExtractorMap,\n        classifierMap = _a.classifierMap;\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n    return (0, _extractParamsFromWeigthMap.extractParamsFromWeigthMap)(classifierMap);\n  };\n  AgeGenderNet.prototype.extractParams = function (weights) {\n    var classifierWeightSize = 512 * 1 + 1 + (512 * 2 + 2);\n    var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    var classifierWeights = weights.slice(weights.length - classifierWeightSize);\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  };\n  return AgeGenderNet;\n}(_NeuralNetwork.NeuralNetwork);\nexports.AgeGenderNet = AgeGenderNet;\n//# sourceMappingURL=AgeGenderNet.js.map"},"hash":"6b00a074a0983fd8f72d4a402c963e9a"}