{"dependencies":[{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":20}},{"name":"./leaky","loc":{"line":2,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convWithBatchNorm = convWithBatchNorm;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _leaky = require(\"./leaky\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction convWithBatchNorm(x, params) {\n  return tf.tidy(function () {\n    var out = tf.pad(x, [[0, 0], [1, 1], [1, 1], [0, 0]]);\n    out = tf.conv2d(out, params.conv.filters, [1, 1], 'valid');\n    out = tf.sub(out, params.bn.sub);\n    out = tf.mul(out, params.bn.truediv);\n    out = tf.add(out, params.conv.bias);\n    return (0, _leaky.leaky)(out);\n  });\n}\n//# sourceMappingURL=convWithBatchNorm.js.map"},"hash":"c19e95a01cb2ed4687e7414d22e47c60"}