{"dependencies":[{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":20}},{"name":"./types","loc":{"line":2,"column":36}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractSeparableConvParamsFactory = extractSeparableConvParamsFactory;\nexports.loadSeparableConvParamsFactory = loadSeparableConvParamsFactory;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction extractSeparableConvParamsFactory(extractWeights, paramMappings) {\n  return function (channelsIn, channelsOut, mappedPrefix) {\n    var depthwise_filter = tf.tensor4d(extractWeights(3 * 3 * channelsIn), [3, 3, channelsIn, 1]);\n    var pointwise_filter = tf.tensor4d(extractWeights(channelsIn * channelsOut), [1, 1, channelsIn, channelsOut]);\n    var bias = tf.tensor1d(extractWeights(channelsOut));\n    paramMappings.push({ paramPath: mappedPrefix + \"/depthwise_filter\" }, { paramPath: mappedPrefix + \"/pointwise_filter\" }, { paramPath: mappedPrefix + \"/bias\" });\n    return new _types.SeparableConvParams(depthwise_filter, pointwise_filter, bias);\n  };\n}\nfunction loadSeparableConvParamsFactory(extractWeightEntry) {\n  return function (prefix) {\n    var depthwise_filter = extractWeightEntry(prefix + \"/depthwise_filter\", 4);\n    var pointwise_filter = extractWeightEntry(prefix + \"/pointwise_filter\", 4);\n    var bias = extractWeightEntry(prefix + \"/bias\", 1);\n    return new _types.SeparableConvParams(depthwise_filter, pointwise_filter, bias);\n  };\n}\n//# sourceMappingURL=extractSeparableConvParamsFactory.js.map"},"hash":"4fea2aaf1a3a85c74a7a4ab9c0d9b79d"}