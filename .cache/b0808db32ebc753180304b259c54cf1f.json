{"dependencies":[{"name":"tslib","loc":{"line":1,"column":50}},{"name":"@tensorflow/tfjs-core","loc":{"line":2,"column":20}},{"name":"../common","loc":{"line":3,"column":39}},{"name":"../dom","loc":{"line":4,"column":27}},{"name":"../NeuralNetwork","loc":{"line":5,"column":30}},{"name":"../ops","loc":{"line":6,"column":26}},{"name":"../utils","loc":{"line":7,"column":22}},{"name":"./extractParams","loc":{"line":8,"column":30}},{"name":"./extractParamsFromWeigthMap","loc":{"line":9,"column":43}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TinyXception = undefined;\n\nvar _tslib = require(\"tslib\");\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _common = require(\"../common\");\n\nvar _dom = require(\"../dom\");\n\nvar _NeuralNetwork = require(\"../NeuralNetwork\");\n\nvar _ops = require(\"../ops\");\n\nvar _utils = require(\"../utils\");\n\nvar _extractParams = require(\"./extractParams\");\n\nvar _extractParamsFromWeigthMap = require(\"./extractParamsFromWeigthMap\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction conv(x, params, stride) {\n  return tf.add(tf.conv2d(x, params.filters, stride, 'same'), params.bias);\n}\nfunction reductionBlock(x, params, isActivateInput) {\n  if (isActivateInput === void 0) {\n    isActivateInput = true;\n  }\n  var out = isActivateInput ? tf.relu(x) : x;\n  out = (0, _common.depthwiseSeparableConv)(out, params.separable_conv0, [1, 1]);\n  out = (0, _common.depthwiseSeparableConv)(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = tf.maxPool(out, [3, 3], [2, 2], 'same');\n  out = tf.add(out, conv(x, params.expansion_conv, [2, 2]));\n  return out;\n}\nfunction mainBlock(x, params) {\n  var out = (0, _common.depthwiseSeparableConv)(tf.relu(x), params.separable_conv0, [1, 1]);\n  out = (0, _common.depthwiseSeparableConv)(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = (0, _common.depthwiseSeparableConv)(tf.relu(out), params.separable_conv2, [1, 1]);\n  out = tf.add(out, x);\n  return out;\n}\nvar TinyXception = /** @class */function (_super) {\n  (0, _tslib.__extends)(TinyXception, _super);\n  function TinyXception(numMainBlocks) {\n    var _this = _super.call(this, 'TinyXception') || this;\n    _this._numMainBlocks = numMainBlocks;\n    return _this;\n  }\n  TinyXception.prototype.forwardInput = function (input) {\n    var _this = this;\n    var params = this.params;\n    if (!params) {\n      throw new Error('TinyXception - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = (0, _ops.normalize)(batchTensor, meanRgb).div(tf.scalar(256));\n      var out = tf.relu(conv(normalized, params.entry_flow.conv_in, [2, 2]));\n      out = reductionBlock(out, params.entry_flow.reduction_block_0, false);\n      out = reductionBlock(out, params.entry_flow.reduction_block_1);\n      (0, _utils.range)(_this._numMainBlocks, 0, 1).forEach(function (idx) {\n        out = mainBlock(out, params.middle_flow[\"main_block_\" + idx]);\n      });\n      out = reductionBlock(out, params.exit_flow.reduction_block);\n      out = tf.relu((0, _common.depthwiseSeparableConv)(out, params.exit_flow.separable_conv, [1, 1]));\n      return out;\n    });\n  };\n  TinyXception.prototype.forward = function (input) {\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n      var _a;\n      return (0, _tslib.__generator)(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, (0, _dom.toNetInput)(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  TinyXception.prototype.getDefaultModelName = function () {\n    return 'tiny_xception_model';\n  };\n  TinyXception.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return (0, _extractParamsFromWeigthMap.extractParamsFromWeigthMap)(weightMap, this._numMainBlocks);\n  };\n  TinyXception.prototype.extractParams = function (weights) {\n    return (0, _extractParams.extractParams)(weights, this._numMainBlocks);\n  };\n  return TinyXception;\n}(_NeuralNetwork.NeuralNetwork);\nexports.TinyXception = TinyXception;\n//# sourceMappingURL=TinyXception.js.map"},"hash":"84c781126cf5b84fa732fc5ec78e4faa"}