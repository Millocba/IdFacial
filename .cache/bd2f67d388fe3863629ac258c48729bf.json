{"dependencies":[{"name":"babel-polyfill","loc":{"line":1,"column":7}},{"name":"face-api.js","loc":{"line":3,"column":25}},{"name":"./uploader","loc":{"line":5,"column":21}}],"generated":{"js":"\"use strict\";\n\nrequire(\"babel-polyfill\");\n\nvar _faceApi = require(\"face-api.js\");\n\nvar faceapi = _interopRequireWildcard(_faceApi);\n\nvar _uploader = require(\"./uploader\");\n\nvar _uploader2 = _interopRequireDefault(_uploader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nconst main = async () => {\n\n  (0, _uploader2.default)('.input-submit', '.images-list');\n  const videoContainer = document.querySelector('.js-video');\n  const canvas = document.querySelector('.js-canvas');\n  const context = canvas.getContext('2d');\n  const video = await navigator.mediaDevices.getUserMedia({ video: true });\n\n  //librerias faceapi\n  await faceapi.nets.tinyFaceDetector.loadFromUri('/models');\n  await faceapi.nets.faceExpressionNet.loadFromUri('/models');\n  await faceapi.nets.faceLandmark68Net.loadFromUri('/models');\n  await faceapi.nets.faceRecognitionNet.loadFromUri('/models');\n\n  videoContainer.srcObject = video;\n\n  const reDraw = async () => {\n\n    context.drawImage(videoContainer, 0, 0, 640, 480);\n\n    requestAnimationFrame(reDraw);\n  };\n\n  /*     Promise.all([\r\n          faceapi.nets.tinyFaceDetector.loadFromUri('/models'),\r\n          faceapi.nets.faceLandmark68Net.loadFromUri('/models'),\r\n          faceapi.nets.faceRecognitionNet.loadFromUri('/models'),\r\n          faceapi.nets.ssdMobilenetv1.loadFromUri('/models')\r\n        ]) */\n\n  const processFace = async () => {\n\n    const detection = await faceapi.detectSingleFace(canvas, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptor();\n    console.log(detection);\n    if (typeof detection === 'undefined') return;\n  };\n\n  setInterval(processFace, 1000);\n\n  requestAnimationFrame(reDraw);\n};\nmain();"},"hash":"cf3aa4dd0f3dff2c9004de927423e0c6"}