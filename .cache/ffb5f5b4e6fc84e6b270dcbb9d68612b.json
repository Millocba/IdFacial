{"dependencies":[{"name":"tslib","loc":{"line":1,"column":50}},{"name":"@tensorflow/tfjs-core","loc":{"line":2,"column":20}},{"name":"../classes","loc":{"line":3,"column":22}},{"name":"../classes/FaceLandmarks68","loc":{"line":4,"column":32}},{"name":"../dom","loc":{"line":5,"column":27}},{"name":"../faceProcessor/FaceProcessor","loc":{"line":6,"column":30}},{"name":"../utils","loc":{"line":7,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FaceLandmark68NetBase = undefined;\n\nvar _tslib = require(\"tslib\");\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _classes = require(\"../classes\");\n\nvar _FaceLandmarks = require(\"../classes/FaceLandmarks68\");\n\nvar _dom = require(\"../dom\");\n\nvar _FaceProcessor = require(\"../faceProcessor/FaceProcessor\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar FaceLandmark68NetBase = /** @class */function (_super) {\n  (0, _tslib.__extends)(FaceLandmark68NetBase, _super);\n  function FaceLandmark68NetBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  FaceLandmark68NetBase.prototype.postProcess = function (output, inputSize, originalDimensions) {\n    var inputDimensions = originalDimensions.map(function (_a) {\n      var width = _a.width,\n          height = _a.height;\n      var scale = inputSize / Math.max(height, width);\n      return {\n        width: width * scale,\n        height: height * scale\n      };\n    });\n    var batchSize = inputDimensions.length;\n    return tf.tidy(function () {\n      var createInterleavedTensor = function (fillX, fillY) {\n        return tf.stack([tf.fill([68], fillX), tf.fill([68], fillY)], 1).as2D(1, 136).as1D();\n      };\n      var getPadding = function (batchIdx, cond) {\n        var _a = inputDimensions[batchIdx],\n            width = _a.width,\n            height = _a.height;\n        return cond(width, height) ? Math.abs(width - height) / 2 : 0;\n      };\n      var getPaddingX = function (batchIdx) {\n        return getPadding(batchIdx, function (w, h) {\n          return w < h;\n        });\n      };\n      var getPaddingY = function (batchIdx) {\n        return getPadding(batchIdx, function (w, h) {\n          return h < w;\n        });\n      };\n      var landmarkTensors = output.mul(tf.fill([batchSize, 136], inputSize)).sub(tf.stack(Array.from(Array(batchSize), function (_, batchIdx) {\n        return createInterleavedTensor(getPaddingX(batchIdx), getPaddingY(batchIdx));\n      }))).div(tf.stack(Array.from(Array(batchSize), function (_, batchIdx) {\n        return createInterleavedTensor(inputDimensions[batchIdx].width, inputDimensions[batchIdx].height);\n      })));\n      return landmarkTensors;\n    });\n  };\n  FaceLandmark68NetBase.prototype.forwardInput = function (input) {\n    var _this = this;\n    return tf.tidy(function () {\n      var out = _this.runNet(input);\n      return _this.postProcess(out, input.inputSize, input.inputDimensions.map(function (_a) {\n        var height = _a[0],\n            width = _a[1];\n        return { height: height, width: width };\n      }));\n    });\n  };\n  FaceLandmark68NetBase.prototype.forward = function (input) {\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n      var _a;\n      return (0, _tslib.__generator)(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, (0, _dom.toNetInput)(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  FaceLandmark68NetBase.prototype.detectLandmarks = function (input) {\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n      var netInput, landmarkTensors, landmarksForBatch;\n      var _this = this;\n      return (0, _tslib.__generator)(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, (0, _dom.toNetInput)(input)];\n          case 1:\n            netInput = _a.sent();\n            landmarkTensors = tf.tidy(function () {\n              return tf.unstack(_this.forwardInput(netInput));\n            });\n            return [4 /*yield*/, Promise.all(landmarkTensors.map(function (landmarkTensor, batchIdx) {\n              return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {\n                var landmarksArray, _a, _b, xCoords, yCoords;\n                return (0, _tslib.__generator)(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      _b = (_a = Array).from;\n                      return [4 /*yield*/, landmarkTensor.data()];\n                    case 1:\n                      landmarksArray = _b.apply(_a, [_c.sent()]);\n                      xCoords = landmarksArray.filter(function (_, i) {\n                        return (0, _utils.isEven)(i);\n                      });\n                      yCoords = landmarksArray.filter(function (_, i) {\n                        return !(0, _utils.isEven)(i);\n                      });\n                      return [2 /*return*/, new _FaceLandmarks.FaceLandmarks68(Array(68).fill(0).map(function (_, i) {\n                        return new _classes.Point(xCoords[i], yCoords[i]);\n                      }), {\n                        height: netInput.getInputHeight(batchIdx),\n                        width: netInput.getInputWidth(batchIdx)\n                      })];\n                  }\n                });\n              });\n            }))];\n          case 2:\n            landmarksForBatch = _a.sent();\n            landmarkTensors.forEach(function (t) {\n              return t.dispose();\n            });\n            return [2 /*return*/, netInput.isBatchInput ? landmarksForBatch : landmarksForBatch[0]];\n        }\n      });\n    });\n  };\n  FaceLandmark68NetBase.prototype.getClassifierChannelsOut = function () {\n    return 136;\n  };\n  return FaceLandmark68NetBase;\n}(_FaceProcessor.FaceProcessor);\nexports.FaceLandmark68NetBase = FaceLandmark68NetBase;\n//# sourceMappingURL=FaceLandmark68NetBase.js.map"},"hash":"a7d0223da766a3e4671b3d6895f36cc7"}