{"dependencies":[{"name":"tslib","loc":{"line":1,"column":25}},{"name":"@tensorflow/tfjs-core","loc":{"line":2,"column":20}},{"name":"../common","loc":{"line":3,"column":89}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractParams = extractParams;\n\nvar _tslib = require(\"tslib\");\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _common = require(\"../common\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction extractorsFactory(extractWeights, paramMappings) {\n  var extractConvParams = (0, _common.extractConvParamsFactory)(extractWeights, paramMappings);\n  var extractFCParams = (0, _common.extractFCParamsFactory)(extractWeights, paramMappings);\n  function extractPReluParams(size, paramPath) {\n    var alpha = tf.tensor1d(extractWeights(size));\n    paramMappings.push({ paramPath: paramPath });\n    return alpha;\n  }\n  function extractSharedParams(numFilters, mappedPrefix, isRnet) {\n    if (isRnet === void 0) {\n      isRnet = false;\n    }\n    var conv1 = extractConvParams(numFilters[0], numFilters[1], 3, mappedPrefix + \"/conv1\");\n    var prelu1_alpha = extractPReluParams(numFilters[1], mappedPrefix + \"/prelu1_alpha\");\n    var conv2 = extractConvParams(numFilters[1], numFilters[2], 3, mappedPrefix + \"/conv2\");\n    var prelu2_alpha = extractPReluParams(numFilters[2], mappedPrefix + \"/prelu2_alpha\");\n    var conv3 = extractConvParams(numFilters[2], numFilters[3], isRnet ? 2 : 3, mappedPrefix + \"/conv3\");\n    var prelu3_alpha = extractPReluParams(numFilters[3], mappedPrefix + \"/prelu3_alpha\");\n    return { conv1: conv1, prelu1_alpha: prelu1_alpha, conv2: conv2, prelu2_alpha: prelu2_alpha, conv3: conv3, prelu3_alpha: prelu3_alpha };\n  }\n  function extractPNetParams() {\n    var sharedParams = extractSharedParams([3, 10, 16, 32], 'pnet');\n    var conv4_1 = extractConvParams(32, 2, 1, 'pnet/conv4_1');\n    var conv4_2 = extractConvParams(32, 4, 1, 'pnet/conv4_2');\n    return (0, _tslib.__assign)((0, _tslib.__assign)({}, sharedParams), { conv4_1: conv4_1, conv4_2: conv4_2 });\n  }\n  function extractRNetParams() {\n    var sharedParams = extractSharedParams([3, 28, 48, 64], 'rnet', true);\n    var fc1 = extractFCParams(576, 128, 'rnet/fc1');\n    var prelu4_alpha = extractPReluParams(128, 'rnet/prelu4_alpha');\n    var fc2_1 = extractFCParams(128, 2, 'rnet/fc2_1');\n    var fc2_2 = extractFCParams(128, 4, 'rnet/fc2_2');\n    return (0, _tslib.__assign)((0, _tslib.__assign)({}, sharedParams), { fc1: fc1, prelu4_alpha: prelu4_alpha, fc2_1: fc2_1, fc2_2: fc2_2 });\n  }\n  function extractONetParams() {\n    var sharedParams = extractSharedParams([3, 32, 64, 64], 'onet');\n    var conv4 = extractConvParams(64, 128, 2, 'onet/conv4');\n    var prelu4_alpha = extractPReluParams(128, 'onet/prelu4_alpha');\n    var fc1 = extractFCParams(1152, 256, 'onet/fc1');\n    var prelu5_alpha = extractPReluParams(256, 'onet/prelu5_alpha');\n    var fc2_1 = extractFCParams(256, 2, 'onet/fc2_1');\n    var fc2_2 = extractFCParams(256, 4, 'onet/fc2_2');\n    var fc2_3 = extractFCParams(256, 10, 'onet/fc2_3');\n    return (0, _tslib.__assign)((0, _tslib.__assign)({}, sharedParams), { conv4: conv4, prelu4_alpha: prelu4_alpha, fc1: fc1, prelu5_alpha: prelu5_alpha, fc2_1: fc2_1, fc2_2: fc2_2, fc2_3: fc2_3 });\n  }\n  return {\n    extractPNetParams: extractPNetParams,\n    extractRNetParams: extractRNetParams,\n    extractONetParams: extractONetParams\n  };\n}\nfunction extractParams(weights) {\n  var _a = (0, _common.extractWeightsFactory)(weights),\n      extractWeights = _a.extractWeights,\n      getRemainingWeights = _a.getRemainingWeights;\n  var paramMappings = [];\n  var _b = extractorsFactory(extractWeights, paramMappings),\n      extractPNetParams = _b.extractPNetParams,\n      extractRNetParams = _b.extractRNetParams,\n      extractONetParams = _b.extractONetParams;\n  var pnet = extractPNetParams();\n  var rnet = extractRNetParams();\n  var onet = extractONetParams();\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n  return { params: { pnet: pnet, rnet: rnet, onet: onet }, paramMappings: paramMappings };\n}\n//# sourceMappingURL=extractParams.js.map"},"hash":"2c00fc4698afdfdae938a7e2f0289e05"}