{"dependencies":[{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":20}},{"name":"../classes","loc":{"line":2,"column":22}},{"name":"../classes/Dimensions","loc":{"line":3,"column":27}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTensor = isTensor;\nexports.isTensor1D = isTensor1D;\nexports.isTensor2D = isTensor2D;\nexports.isTensor3D = isTensor3D;\nexports.isTensor4D = isTensor4D;\nexports.isFloat = isFloat;\nexports.isEven = isEven;\nexports.round = round;\nexports.isDimensions = isDimensions;\nexports.computeReshapedDimensions = computeReshapedDimensions;\nexports.getCenterPoint = getCenterPoint;\nexports.range = range;\nexports.isValidNumber = isValidNumber;\nexports.isValidProbablitiy = isValidProbablitiy;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _classes = require(\"../classes\");\n\nvar _Dimensions = require(\"../classes/Dimensions\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction isTensor(tensor, dim) {\n  return tensor instanceof tf.Tensor && tensor.shape.length === dim;\n}\nfunction isTensor1D(tensor) {\n  return isTensor(tensor, 1);\n}\nfunction isTensor2D(tensor) {\n  return isTensor(tensor, 2);\n}\nfunction isTensor3D(tensor) {\n  return isTensor(tensor, 3);\n}\nfunction isTensor4D(tensor) {\n  return isTensor(tensor, 4);\n}\nfunction isFloat(num) {\n  return num % 1 !== 0;\n}\nfunction isEven(num) {\n  return num % 2 === 0;\n}\nfunction round(num, prec) {\n  if (prec === void 0) {\n    prec = 2;\n  }\n  var f = Math.pow(10, prec);\n  return Math.floor(num * f) / f;\n}\nfunction isDimensions(obj) {\n  return obj && obj.width && obj.height;\n}\nfunction computeReshapedDimensions(_a, inputSize) {\n  var width = _a.width,\n      height = _a.height;\n  var scale = inputSize / Math.max(height, width);\n  return new _Dimensions.Dimensions(Math.round(width * scale), Math.round(height * scale));\n}\nfunction getCenterPoint(pts) {\n  return pts.reduce(function (sum, pt) {\n    return sum.add(pt);\n  }, new _classes.Point(0, 0)).div(new _classes.Point(pts.length, pts.length));\n}\nfunction range(num, start, step) {\n  return Array(num).fill(0).map(function (_, i) {\n    return start + i * step;\n  });\n}\nfunction isValidNumber(num) {\n  return !!num && num !== Infinity && num !== -Infinity && !isNaN(num) || num === 0;\n}\nfunction isValidProbablitiy(num) {\n  return isValidNumber(num) && 0 <= num && num <= 1.0;\n}\n//# sourceMappingURL=index.js.map"},"hash":"4349ef486baa866573f766d5724068ac"}