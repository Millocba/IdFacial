{"dependencies":[{"name":"tslib","loc":{"line":1,"column":39}},{"name":"@tensorflow/tfjs-core","loc":{"line":2,"column":20}},{"name":"../dom","loc":{"line":3,"column":49}},{"name":"../factories/WithFaceLandmarks","loc":{"line":4,"column":36}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractAllFacesAndComputeResults = extractAllFacesAndComputeResults;\nexports.extractSingleFaceAndComputeResult = extractSingleFaceAndComputeResult;\n\nvar _tslib = require(\"tslib\");\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _dom = require(\"../dom\");\n\nvar _WithFaceLandmarks = require(\"../factories/WithFaceLandmarks\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction extractAllFacesAndComputeResults(parentResults, input, computeResults, extractedFaces, getRectForAlignment) {\n  if (getRectForAlignment === void 0) {\n    getRectForAlignment = function (_a) {\n      var alignedRect = _a.alignedRect;\n      return alignedRect;\n    };\n  }\n  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n    var faceBoxes, faces, _a, _b, results;\n    return (0, _tslib.__generator)(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          faceBoxes = parentResults.map(function (parentResult) {\n            return (0, _WithFaceLandmarks.isWithFaceLandmarks)(parentResult) ? getRectForAlignment(parentResult) : parentResult.detection;\n          });\n          _a = extractedFaces;\n          if (_a) return [3 /*break*/, 5];\n          if (!(input instanceof tf.Tensor)) return [3 /*break*/, 2];\n          return [4 /*yield*/, (0, _dom.extractFaceTensors)(input, faceBoxes)];\n        case 1:\n          _b = _c.sent();\n          return [3 /*break*/, 4];\n        case 2:\n          return [4 /*yield*/, (0, _dom.extractFaces)(input, faceBoxes)];\n        case 3:\n          _b = _c.sent();\n          _c.label = 4;\n        case 4:\n          _a = _b;\n          _c.label = 5;\n        case 5:\n          faces = _a;\n          return [4 /*yield*/, computeResults(faces)];\n        case 6:\n          results = _c.sent();\n          faces.forEach(function (f) {\n            return f instanceof tf.Tensor && f.dispose();\n          });\n          return [2 /*return*/, results];\n      }\n    });\n  });\n}\nfunction extractSingleFaceAndComputeResult(parentResult, input, computeResult, extractedFaces, getRectForAlignment) {\n  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n    var _this = this;\n    return (0, _tslib.__generator)(this, function (_a) {\n      return [2 /*return*/, extractAllFacesAndComputeResults([parentResult], input, function (faces) {\n        return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {\n          return (0, _tslib.__generator)(this, function (_a) {\n            return [2 /*return*/, computeResult(faces[0])];\n          });\n        });\n      }, extractedFaces, getRectForAlignment)];\n    });\n  });\n}\n//# sourceMappingURL=extractFacesAndComputeResults.js.map"},"hash":"efcfb898e2ad38ed50ef254a7700e1f2"}