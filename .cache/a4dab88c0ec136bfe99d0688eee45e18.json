{"dependencies":[{"name":"./localStorage","loc":{"line":1,"column":35}},{"name":"uuid","loc":{"line":3,"column":29}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _localStorage = require(\"./localStorage\");\n\nvar _uuid = require(\"uuid\");\n\nwindow.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n\nconst uploadFile = file => {\n  return new Promise((resolve, reject) => {\n\n    window.requestFileSystem(window.TEMPORARY, 1024 * 1024, function (fs) {\n      fs.root.getFile(`${file.name}${(0, _uuid.v4)()}`, { create: true, exclusive: true }, function (fileEntry) {\n        fileEntry.createWriter(function (fileWriter) {\n          fileWriter.write(file);\n          resolve(fileEntry);\n        }, e => console.log(e));\n      }, e => console.log(e));\n    });\n  });\n};\n\nconst fileEntryPathToObjectUrl = async fileEntryPath => {\n  return URL.createObjectURL((await new Promise((resolve, reject) => {\n    window.requestFileSystem(window.TEMPORARY, 1024 * 1024, function (fs) {\n      fs.root.getFile(fileEntryPath, { create: true, exclusive: false }, function (fileEntry) {\n        fileEntry.file(resolve, reject);\n      }, e => console.log(e));\n    });\n  })));\n};\n\n// para el boton\nconst uploader = (submitSelector, imagesListSelector) => {\n\n  const submit = document.querySelector(submitSelector);\n  const imagesList = document.querySelector(imagesListSelector);\n\n  const syncImages = () => {\n\n    while (imagesList.firstChild) {\n      imagesList.removeChild(imagesList.firstChild);\n    }\n\n    (0, _localStorage.read)().forEach(async image => {\n      const imageContainer = document.createElement('div');\n      const label = document.createElement('input');\n      const imageElement = document.createElement('img');\n      //estado \n      const deleteLink = document.createElement('a');\n      imageContainer.classList.add('image-container');\n      deleteLink.classList.add('cerrar');\n      imageElement.classList.add('card-img-top');\n      imageContainer.id = image.id;\n      deleteLink.href = '#';\n      deleteLink.innerText = 'X';\n      //status classlist\n\n      imageElement.src = await fileEntryPathToObjectUrl(image.path);\n      label.value = image.name;\n\n      deleteLink.addEventListener('click', e => {\n        e.preventDefault();\n        (0, _localStorage.destroy)(image.id);\n        syncImages();\n      });\n\n      imageContainer.appendChild(deleteLink);\n\n      imageContainer.appendChild(imageElement);\n      imageContainer.appendChild(label);\n\n      imagesList.appendChild(imageContainer);\n    });\n  };\n\n  submit.addEventListener('change', async e => {\n\n    const fileEntry = await uploadFile(e.target.files[0]);\n\n    (0, _localStorage.write)([...(0, _localStorage.read)(), {\n      id: (0, _uuid.v4)(),\n      path: fileEntry.fullPath,\n      name: (0, _uuid.v4)().toString()\n    }]);\n    syncImages();\n  });\n};\n\nexports.default = uploader;"},"hash":"4c2f51e201324d10c5ea8d1499f5ea2b"}