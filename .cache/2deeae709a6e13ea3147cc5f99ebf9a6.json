{"dependencies":[{"name":"tslib","loc":{"line":1,"column":50}},{"name":"../factories/WithFaceDescriptor","loc":{"line":2,"column":41}},{"name":"./ComposableTask","loc":{"line":3,"column":31}},{"name":"./extractFacesAndComputeResults","loc":{"line":4,"column":84}},{"name":"./nets","loc":{"line":5,"column":21}},{"name":"./PredictAgeAndGenderTask","loc":{"line":6,"column":109}},{"name":"./PredictFaceExpressionsTask","loc":{"line":7,"column":115}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ComputeSingleFaceDescriptorTask = exports.ComputeAllFaceDescriptorsTask = exports.ComputeFaceDescriptorsTaskBase = undefined;\n\nvar _tslib = require(\"tslib\");\n\nvar _WithFaceDescriptor = require(\"../factories/WithFaceDescriptor\");\n\nvar _ComposableTask = require(\"./ComposableTask\");\n\nvar _extractFacesAndComputeResults = require(\"./extractFacesAndComputeResults\");\n\nvar _nets = require(\"./nets\");\n\nvar _PredictAgeAndGenderTask = require(\"./PredictAgeAndGenderTask\");\n\nvar _PredictFaceExpressionsTask = require(\"./PredictFaceExpressionsTask\");\n\nvar ComputeFaceDescriptorsTaskBase = /** @class */function (_super) {\n  (0, _tslib.__extends)(ComputeFaceDescriptorsTaskBase, _super);\n  function ComputeFaceDescriptorsTaskBase(parentTask, input) {\n    var _this = _super.call(this) || this;\n    _this.parentTask = parentTask;\n    _this.input = input;\n    return _this;\n  }\n  return ComputeFaceDescriptorsTaskBase;\n}(_ComposableTask.ComposableTask);\nexports.ComputeFaceDescriptorsTaskBase = ComputeFaceDescriptorsTaskBase;\n\nvar ComputeAllFaceDescriptorsTask = /** @class */function (_super) {\n  (0, _tslib.__extends)(ComputeAllFaceDescriptorsTask, _super);\n  function ComputeAllFaceDescriptorsTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ComputeAllFaceDescriptorsTask.prototype.run = function () {\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n      var parentResults, descriptors;\n      return (0, _tslib.__generator)(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.parentTask];\n          case 1:\n            parentResults = _a.sent();\n            return [4 /*yield*/, (0, _extractFacesAndComputeResults.extractAllFacesAndComputeResults)(parentResults, this.input, function (faces) {\n              return Promise.all(faces.map(function (face) {\n                return _nets.nets.faceRecognitionNet.computeFaceDescriptor(face);\n              }));\n            }, null, function (parentResult) {\n              return parentResult.landmarks.align(null, { useDlibAlignment: true });\n            })];\n          case 2:\n            descriptors = _a.sent();\n            return [2 /*return*/, descriptors.map(function (descriptor, i) {\n              return (0, _WithFaceDescriptor.extendWithFaceDescriptor)(parentResults[i], descriptor);\n            })];\n        }\n      });\n    });\n  };\n  ComputeAllFaceDescriptorsTask.prototype.withFaceExpressions = function () {\n    return new _PredictFaceExpressionsTask.PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  };\n  ComputeAllFaceDescriptorsTask.prototype.withAgeAndGender = function () {\n    return new _PredictAgeAndGenderTask.PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  };\n  return ComputeAllFaceDescriptorsTask;\n}(ComputeFaceDescriptorsTaskBase);\nexports.ComputeAllFaceDescriptorsTask = ComputeAllFaceDescriptorsTask;\n\nvar ComputeSingleFaceDescriptorTask = /** @class */function (_super) {\n  (0, _tslib.__extends)(ComputeSingleFaceDescriptorTask, _super);\n  function ComputeSingleFaceDescriptorTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ComputeSingleFaceDescriptorTask.prototype.run = function () {\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n      var parentResult, descriptor;\n      return (0, _tslib.__generator)(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.parentTask];\n          case 1:\n            parentResult = _a.sent();\n            if (!parentResult) {\n              return [2 /*return*/];\n            }\n            return [4 /*yield*/, (0, _extractFacesAndComputeResults.extractSingleFaceAndComputeResult)(parentResult, this.input, function (face) {\n              return _nets.nets.faceRecognitionNet.computeFaceDescriptor(face);\n            }, null, function (parentResult) {\n              return parentResult.landmarks.align(null, { useDlibAlignment: true });\n            })];\n          case 2:\n            descriptor = _a.sent();\n            return [2 /*return*/, (0, _WithFaceDescriptor.extendWithFaceDescriptor)(parentResult, descriptor)];\n        }\n      });\n    });\n  };\n  ComputeSingleFaceDescriptorTask.prototype.withFaceExpressions = function () {\n    return new _PredictFaceExpressionsTask.PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  };\n  ComputeSingleFaceDescriptorTask.prototype.withAgeAndGender = function () {\n    return new _PredictAgeAndGenderTask.PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  };\n  return ComputeSingleFaceDescriptorTask;\n}(ComputeFaceDescriptorsTaskBase);\nexports.ComputeSingleFaceDescriptorTask = ComputeSingleFaceDescriptorTask;\n//# sourceMappingURL=ComputeFaceDescriptorsTasks.js.map"},"hash":"d8d2407bc80d61a5e65d09fff82ffe24"}