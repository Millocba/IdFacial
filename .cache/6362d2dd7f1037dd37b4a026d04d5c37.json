{"dependencies":[{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":20}},{"name":"../common","loc":{"line":2,"column":26}},{"name":"./sharedLayers","loc":{"line":3,"column":28}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PNet = PNet;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _common = require(\"../common\");\n\nvar _sharedLayers = require(\"./sharedLayers\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction PNet(x, params) {\n  return tf.tidy(function () {\n    var out = (0, _sharedLayers.sharedLayer)(x, params, true);\n    var conv = (0, _common.convLayer)(out, params.conv4_1, 'valid');\n    var max = tf.expandDims(tf.max(conv, 3), 3);\n    var prob = tf.softmax(tf.sub(conv, max), 3);\n    var regions = (0, _common.convLayer)(out, params.conv4_2, 'valid');\n    return { prob: prob, regions: regions };\n  });\n}\n//# sourceMappingURL=PNet.js.map"},"hash":"81e9447722bb2743b16ae2e29aa9d755"}