{"dependencies":[{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":20}},{"name":"../common","loc":{"line":2,"column":26}},{"name":"./prelu","loc":{"line":3,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sharedLayer = sharedLayer;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _common = require(\"../common\");\n\nvar _prelu = require(\"./prelu\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction sharedLayer(x, params, isPnet) {\n  if (isPnet === void 0) {\n    isPnet = false;\n  }\n  return tf.tidy(function () {\n    var out = (0, _common.convLayer)(x, params.conv1, 'valid');\n    out = (0, _prelu.prelu)(out, params.prelu1_alpha);\n    out = tf.maxPool(out, isPnet ? [2, 2] : [3, 3], [2, 2], 'same');\n    out = (0, _common.convLayer)(out, params.conv2, 'valid');\n    out = (0, _prelu.prelu)(out, params.prelu2_alpha);\n    out = isPnet ? out : tf.maxPool(out, [3, 3], [2, 2], 'valid');\n    out = (0, _common.convLayer)(out, params.conv3, 'valid');\n    out = (0, _prelu.prelu)(out, params.prelu3_alpha);\n    return out;\n  });\n}\n//# sourceMappingURL=sharedLayers.js.map"},"hash":"33c768dbc6aecd75b54bcd4fc3ebe47c"}