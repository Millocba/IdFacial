{"dependencies":[{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":20}},{"name":"../classes","loc":{"line":2,"column":35}},{"name":"../ops","loc":{"line":3,"column":34}},{"name":"./config","loc":{"line":4,"column":39}},{"name":"./getSizesForScale","loc":{"line":5,"column":33}},{"name":"./MtcnnBox","loc":{"line":6,"column":25}},{"name":"./normalize","loc":{"line":7,"column":26}},{"name":"./PNet","loc":{"line":8,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stage1 = stage1;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _classes = require(\"../classes\");\n\nvar _ops = require(\"../ops\");\n\nvar _config = require(\"./config\");\n\nvar _getSizesForScale = require(\"./getSizesForScale\");\n\nvar _MtcnnBox = require(\"./MtcnnBox\");\n\nvar _normalize = require(\"./normalize\");\n\nvar _PNet = require(\"./PNet\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction rescaleAndNormalize(x, scale) {\n  return tf.tidy(function () {\n    var _a = (0, _getSizesForScale.getSizesForScale)(scale, x.shape.slice(1)),\n        height = _a.height,\n        width = _a.width;\n    var resized = tf.image.resizeBilinear(x, [height, width]);\n    var normalized = (0, _normalize.normalize)(resized);\n    return tf.transpose(normalized, [0, 2, 1, 3]);\n  });\n}\nfunction extractBoundingBoxes(scoresTensor, regionsTensor, scale, scoreThreshold) {\n  // TODO: fix this!, maybe better to use tf.gather here\n  var indices = [];\n  var scoresData = scoresTensor.arraySync();\n  for (var y = 0; y < scoresTensor.shape[0]; y++) {\n    for (var x = 0; x < scoresTensor.shape[1]; x++) {\n      if (scoresData[y][x] >= scoreThreshold) {\n        indices.push(new _classes.Point(x, y));\n      }\n    }\n  }\n  var boundingBoxes = indices.map(function (idx) {\n    var cell = new _classes.BoundingBox(Math.round((idx.y * _config.CELL_STRIDE + 1) / scale), Math.round((idx.x * _config.CELL_STRIDE + 1) / scale), Math.round((idx.y * _config.CELL_STRIDE + _config.CELL_SIZE) / scale), Math.round((idx.x * _config.CELL_STRIDE + _config.CELL_SIZE) / scale));\n    var score = scoresData[idx.y][idx.x];\n    var regionsData = regionsTensor.arraySync();\n    var region = new _MtcnnBox.MtcnnBox(regionsData[idx.y][idx.x][0], regionsData[idx.y][idx.x][1], regionsData[idx.y][idx.x][2], regionsData[idx.y][idx.x][3]);\n    return {\n      cell: cell,\n      score: score,\n      region: region\n    };\n  });\n  return boundingBoxes;\n}\nfunction stage1(imgTensor, scales, scoreThreshold, params, stats) {\n  stats.stage1 = [];\n  var pnetOutputs = scales.map(function (scale) {\n    return tf.tidy(function () {\n      var statsForScale = { scale: scale };\n      var resized = rescaleAndNormalize(imgTensor, scale);\n      var ts = Date.now();\n      var _a = (0, _PNet.PNet)(resized, params),\n          prob = _a.prob,\n          regions = _a.regions;\n      statsForScale.pnet = Date.now() - ts;\n      var scoresTensor = tf.unstack(tf.unstack(prob, 3)[1])[0];\n      var regionsTensor = tf.unstack(regions)[0];\n      return {\n        scoresTensor: scoresTensor,\n        regionsTensor: regionsTensor,\n        scale: scale,\n        statsForScale: statsForScale\n      };\n    });\n  });\n  var boxesForScale = pnetOutputs.map(function (_a) {\n    var scoresTensor = _a.scoresTensor,\n        regionsTensor = _a.regionsTensor,\n        scale = _a.scale,\n        statsForScale = _a.statsForScale;\n    var boundingBoxes = extractBoundingBoxes(scoresTensor, regionsTensor, scale, scoreThreshold);\n    scoresTensor.dispose();\n    regionsTensor.dispose();\n    if (!boundingBoxes.length) {\n      stats.stage1.push(statsForScale);\n      return [];\n    }\n    var ts = Date.now();\n    var indices = (0, _ops.nonMaxSuppression)(boundingBoxes.map(function (bbox) {\n      return bbox.cell;\n    }), boundingBoxes.map(function (bbox) {\n      return bbox.score;\n    }), 0.5);\n    statsForScale.nms = Date.now() - ts;\n    statsForScale.numBoxes = indices.length;\n    stats.stage1.push(statsForScale);\n    return indices.map(function (boxIdx) {\n      return boundingBoxes[boxIdx];\n    });\n  });\n  var allBoxes = boxesForScale.reduce(function (all, boxes) {\n    return all.concat(boxes);\n  }, []);\n  var finalBoxes = [];\n  var finalScores = [];\n  if (allBoxes.length > 0) {\n    var ts = Date.now();\n    var indices = (0, _ops.nonMaxSuppression)(allBoxes.map(function (bbox) {\n      return bbox.cell;\n    }), allBoxes.map(function (bbox) {\n      return bbox.score;\n    }), 0.7);\n    stats.stage1_nms = Date.now() - ts;\n    finalScores = indices.map(function (idx) {\n      return allBoxes[idx].score;\n    });\n    finalBoxes = indices.map(function (idx) {\n      return allBoxes[idx];\n    }).map(function (_a) {\n      var cell = _a.cell,\n          region = _a.region;\n      return new _classes.BoundingBox(cell.left + region.left * cell.width, cell.top + region.top * cell.height, cell.right + region.right * cell.width, cell.bottom + region.bottom * cell.height).toSquare().round();\n    });\n  }\n  return {\n    boxes: finalBoxes,\n    scores: finalScores\n  };\n}\n//# sourceMappingURL=stage1.js.map"},"hash":"c254726813b4c6bbe610265a870822ad"}