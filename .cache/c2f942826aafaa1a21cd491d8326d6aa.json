{"dependencies":[{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":20}},{"name":"../common/depthwiseSeparableConv","loc":{"line":2,"column":39}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.denseBlock3 = denseBlock3;\nexports.denseBlock4 = denseBlock4;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _depthwiseSeparableConv = require(\"../common/depthwiseSeparableConv\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction denseBlock3(x, denseBlockParams, isFirstLayer) {\n  if (isFirstLayer === void 0) {\n    isFirstLayer = false;\n  }\n  return tf.tidy(function () {\n    var out1 = tf.relu(isFirstLayer ? tf.add(tf.conv2d(x, denseBlockParams.conv0.filters, [2, 2], 'same'), denseBlockParams.conv0.bias) : (0, _depthwiseSeparableConv.depthwiseSeparableConv)(x, denseBlockParams.conv0, [2, 2]));\n    var out2 = (0, _depthwiseSeparableConv.depthwiseSeparableConv)(out1, denseBlockParams.conv1, [1, 1]);\n    var in3 = tf.relu(tf.add(out1, out2));\n    var out3 = (0, _depthwiseSeparableConv.depthwiseSeparableConv)(in3, denseBlockParams.conv2, [1, 1]);\n    return tf.relu(tf.add(out1, tf.add(out2, out3)));\n  });\n}\nfunction denseBlock4(x, denseBlockParams, isFirstLayer, isScaleDown) {\n  if (isFirstLayer === void 0) {\n    isFirstLayer = false;\n  }\n  if (isScaleDown === void 0) {\n    isScaleDown = true;\n  }\n  return tf.tidy(function () {\n    var out1 = tf.relu(isFirstLayer ? tf.add(tf.conv2d(x, denseBlockParams.conv0.filters, isScaleDown ? [2, 2] : [1, 1], 'same'), denseBlockParams.conv0.bias) : (0, _depthwiseSeparableConv.depthwiseSeparableConv)(x, denseBlockParams.conv0, isScaleDown ? [2, 2] : [1, 1]));\n    var out2 = (0, _depthwiseSeparableConv.depthwiseSeparableConv)(out1, denseBlockParams.conv1, [1, 1]);\n    var in3 = tf.relu(tf.add(out1, out2));\n    var out3 = (0, _depthwiseSeparableConv.depthwiseSeparableConv)(in3, denseBlockParams.conv2, [1, 1]);\n    var in4 = tf.relu(tf.add(out1, tf.add(out2, out3)));\n    var out4 = (0, _depthwiseSeparableConv.depthwiseSeparableConv)(in4, denseBlockParams.conv3, [1, 1]);\n    return tf.relu(tf.add(out1, tf.add(out2, tf.add(out3, out4))));\n  });\n}\n//# sourceMappingURL=denseBlock.js.map"},"hash":"1108ff1c31b32f2d419e231fc0aed2be"}