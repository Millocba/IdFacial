{"dependencies":[{"name":"tslib","loc":{"line":1,"column":39}},{"name":"../mtcnn/MtcnnOptions","loc":{"line":2,"column":29}},{"name":"../ssdMobilenetv1","loc":{"line":3,"column":38}},{"name":"../tinyYolov2","loc":{"line":4,"column":34}},{"name":"./detectFaces","loc":{"line":5,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.allFaces = undefined;\nexports.allFacesSsdMobilenetv1 = allFacesSsdMobilenetv1;\nexports.allFacesTinyYolov2 = allFacesTinyYolov2;\nexports.allFacesMtcnn = allFacesMtcnn;\n\nvar _tslib = require(\"tslib\");\n\nvar _MtcnnOptions = require(\"../mtcnn/MtcnnOptions\");\n\nvar _ssdMobilenetv = require(\"../ssdMobilenetv1\");\n\nvar _tinyYolov = require(\"../tinyYolov2\");\n\nvar _detectFaces = require(\"./detectFaces\");\n\n// export allFaces API for backward compatibility\nfunction allFacesSsdMobilenetv1(input, minConfidence) {\n  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n    return (0, _tslib.__generator)(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          console.warn('allFacesSsdMobilenetv1 is deprecated and will be removed soon, use the high level api instead');\n          return [4 /*yield*/, (0, _detectFaces.detectAllFaces)(input, new _ssdMobilenetv.SsdMobilenetv1Options(minConfidence ? { minConfidence: minConfidence } : {})).withFaceLandmarks().withFaceDescriptors()];\n        case 1:\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n}\nfunction allFacesTinyYolov2(input, forwardParams) {\n  if (forwardParams === void 0) {\n    forwardParams = {};\n  }\n  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n    return (0, _tslib.__generator)(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          console.warn('allFacesTinyYolov2 is deprecated and will be removed soon, use the high level api instead');\n          return [4 /*yield*/, (0, _detectFaces.detectAllFaces)(input, new _tinyYolov.TinyYolov2Options(forwardParams)).withFaceLandmarks().withFaceDescriptors()];\n        case 1:\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n}\nfunction allFacesMtcnn(input, forwardParams) {\n  if (forwardParams === void 0) {\n    forwardParams = {};\n  }\n  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n    return (0, _tslib.__generator)(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          console.warn('allFacesMtcnn is deprecated and will be removed soon, use the high level api instead');\n          return [4 /*yield*/, (0, _detectFaces.detectAllFaces)(input, new _MtcnnOptions.MtcnnOptions(forwardParams)).withFaceLandmarks().withFaceDescriptors()];\n        case 1:\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n}\nvar allFaces = exports.allFaces = allFacesSsdMobilenetv1;\n//# sourceMappingURL=allFaces.js.map"},"hash":"0d30cea038d5e53e593ed46f26c92da9"}