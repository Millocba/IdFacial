{"dependencies":[{"name":"@tensorflow/tfjs-core","loc":{"line":1,"column":20}},{"name":"../common","loc":{"line":2,"column":26}},{"name":"../common/fullyConnectedLayer","loc":{"line":3,"column":36}},{"name":"./prelu","loc":{"line":4,"column":22}},{"name":"./sharedLayers","loc":{"line":5,"column":28}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ONet = ONet;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _common = require(\"../common\");\n\nvar _fullyConnectedLayer = require(\"../common/fullyConnectedLayer\");\n\nvar _prelu = require(\"./prelu\");\n\nvar _sharedLayers = require(\"./sharedLayers\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction ONet(x, params) {\n  return tf.tidy(function () {\n    var out = (0, _sharedLayers.sharedLayer)(x, params);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = (0, _common.convLayer)(out, params.conv4, 'valid');\n    out = (0, _prelu.prelu)(out, params.prelu4_alpha);\n    var vectorized = tf.reshape(out, [out.shape[0], params.fc1.weights.shape[0]]);\n    var fc1 = (0, _fullyConnectedLayer.fullyConnectedLayer)(vectorized, params.fc1);\n    var prelu5 = (0, _prelu.prelu)(fc1, params.prelu5_alpha);\n    var fc2_1 = (0, _fullyConnectedLayer.fullyConnectedLayer)(prelu5, params.fc2_1);\n    var max = tf.expandDims(tf.max(fc2_1, 1), 1);\n    var prob = tf.softmax(tf.sub(fc2_1, max), 1);\n    var regions = (0, _fullyConnectedLayer.fullyConnectedLayer)(prelu5, params.fc2_2);\n    var points = (0, _fullyConnectedLayer.fullyConnectedLayer)(prelu5, params.fc2_3);\n    var scores = tf.unstack(prob, 1)[1];\n    return { scores: scores, regions: regions, points: points };\n  });\n}\n//# sourceMappingURL=ONet.js.map"},"hash":"51a24ad234e3d8ee6397e875a9dd3c81"}