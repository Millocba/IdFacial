{"dependencies":[{"name":"tslib","loc":{"line":1,"column":50}},{"name":"@tensorflow/tfjs-core","loc":{"line":2,"column":20}},{"name":"../dom","loc":{"line":3,"column":27}},{"name":"../faceFeatureExtractor/FaceFeatureExtractor","loc":{"line":4,"column":37}},{"name":"../faceProcessor/FaceProcessor","loc":{"line":5,"column":30}},{"name":"./FaceExpressions","loc":{"line":6,"column":32}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FaceExpressionNet = undefined;\n\nvar _tslib = require(\"tslib\");\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar tf = _interopRequireWildcard(_tfjsCore);\n\nvar _dom = require(\"../dom\");\n\nvar _FaceFeatureExtractor = require(\"../faceFeatureExtractor/FaceFeatureExtractor\");\n\nvar _FaceProcessor = require(\"../faceProcessor/FaceProcessor\");\n\nvar _FaceExpressions = require(\"./FaceExpressions\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar FaceExpressionNet = /** @class */function (_super) {\n  (0, _tslib.__extends)(FaceExpressionNet, _super);\n  function FaceExpressionNet(faceFeatureExtractor) {\n    if (faceFeatureExtractor === void 0) {\n      faceFeatureExtractor = new _FaceFeatureExtractor.FaceFeatureExtractor();\n    }\n    return _super.call(this, 'FaceExpressionNet', faceFeatureExtractor) || this;\n  }\n  FaceExpressionNet.prototype.forwardInput = function (input) {\n    var _this = this;\n    return tf.tidy(function () {\n      return tf.softmax(_this.runNet(input));\n    });\n  };\n  FaceExpressionNet.prototype.forward = function (input) {\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n      var _a;\n      return (0, _tslib.__generator)(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, (0, _dom.toNetInput)(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  FaceExpressionNet.prototype.predictExpressions = function (input) {\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n      var netInput, out, probabilitesByBatch, predictionsByBatch;\n      var _this = this;\n      return (0, _tslib.__generator)(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, (0, _dom.toNetInput)(input)];\n          case 1:\n            netInput = _a.sent();\n            return [4 /*yield*/, this.forwardInput(netInput)];\n          case 2:\n            out = _a.sent();\n            return [4 /*yield*/, Promise.all(tf.unstack(out).map(function (t) {\n              return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {\n                var data;\n                return (0, _tslib.__generator)(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, t.data()];\n                    case 1:\n                      data = _a.sent();\n                      t.dispose();\n                      return [2 /*return*/, data];\n                  }\n                });\n              });\n            }))];\n          case 3:\n            probabilitesByBatch = _a.sent();\n            out.dispose();\n            predictionsByBatch = probabilitesByBatch.map(function (probabilites) {\n              return new _FaceExpressions.FaceExpressions(probabilites);\n            });\n            return [2 /*return*/, netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]];\n        }\n      });\n    });\n  };\n  FaceExpressionNet.prototype.getDefaultModelName = function () {\n    return 'face_expression_model';\n  };\n  FaceExpressionNet.prototype.getClassifierChannelsIn = function () {\n    return 256;\n  };\n  FaceExpressionNet.prototype.getClassifierChannelsOut = function () {\n    return 7;\n  };\n  return FaceExpressionNet;\n}(_FaceProcessor.FaceProcessor);\nexports.FaceExpressionNet = FaceExpressionNet;\n//# sourceMappingURL=FaceExpressionNet.js.map"},"hash":"fafc175e23100d2ec3f2c52f20164c4d"}